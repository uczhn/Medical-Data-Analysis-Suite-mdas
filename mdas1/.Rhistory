?discretize
devtools::check()
?treeAnalysis
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?clusterPlot
devtools::check()
devtools::check()
devtools::check()
?bivariateAnalysis
devtools::check()
devtools::check()
?getCriteriaNames
devtools::check()
?do.call
devtools::check()
devtools::check()
?preCheck
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?preCheck
devtools::check()
install.packages("klaR")
library(klaR)
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?univariateAnalysis
devtools::check()
devtools::check()
devtools::check()
library(usethis)
library(devtools)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?plotBoxplotGroup
devtools::check()
?plotBoxplotGroup
?plotBeforeAfterImpute
devtools::check()
?missforest
?missForest
devtools::check()
devtools::check()
?plotBeforeAfterImpute
?MRMR
devtools::check()
devtools::check()
?getName
?getName
devtools::check()
devtools::check()
devtools::check()
?hClustCon
devtools::check()
devtools::check()
?hClustCon
?agnes
?getClusterDesc
devtools::check()
devtools::check()
?getClusterDesc
devtools::check()
devtools::check()
devtools::check()
?getClusCategoDesc
devtools::check()
devtools::check()
?checkValidity
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?
?getName
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?shortnames
?shortnames
shortNames
?shortNames
?shortName
?shortnames
devtools::check()
install.packages("klaR")
library(klaR)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?getName
??getName
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?
?tolower
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?do.call
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(devtools)
devtools::check()
?shapiro.test
devtools::check()
devtools::check()
devtools::check()
?qqnorm
devtools::check()
?univariateAnalysis
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?mlAnalysis
?mlAnalysis
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?checkImpute
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?dataImputation
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?clusterPlot
devtools::check()
devtools::check()
?hClustCon
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(devtools)
devtools:check()
devtools::check()
devtools::check()
fs = tolower(fs)
devtools::check()
devtools::check()
devtools::check()
? clusterAanalysis
?clusterAanalysis
devtools::check()
?mode
library(devtools)
devtools::check()
?clusterAanalysis
??clusterAanalysis
devtools::check()
?clusterAanalysis
devtools::check()
library(devtools)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?treeAnalysis
devtools::check()
library(dev)
library(devtools)
devtools::check()
?mode
devtools::check()
?getName
devtools::check()
devtools::check()
devtools::check()
univariateAnalysis  = function(dat, hist = FALSE,boxplot = FALSE,qqnorm  = FALSE, shapiro = FALSE){
graphics::par(mfrow = c(1,4))
if (hist ==TRUE){
for(i in 1:4) {  graphics::hist(dat[,i], main=names(dat)[i], xlab = names(dat)[i], col = "skyblue")}
}
if(boxplot == TRUE) {
for(i in 1:4)  {graphics::boxplot(dat[,i], main=names(dat)[i], xlab = names(dat)[i], col = "skyblue")}
}
if(qqnorm ==TRUE) {
for(i in 1:4) {stats::qqnorm(dat[,i], main=names(dat)[i], xlab = names(dat)[i], col = "skyblue")}
}
if(shapiro ==TRUE) {
results <-for(i in 1:4)  {stats::shapiro.test(dat[,i])}
print(results)
}
}
data(iris)
univariateAnalysis(dat = iris, hist= TRUE)
univariateAnalysis  = function(dat, hist = FALSE,boxplot = FALSE,qqnorm  = FALSE, shapiro = FALSE){
graphics::par(mfrow = c(1,4))
if (hist ==TRUE){
for(i in 1:4) {  graphics::hist(dat[,i], main=names(dat)[i], xlab = names(dat)[i], col = "skyblue")}
}
if(boxplot == TRUE) {
for(i in 1:4)  {graphics::boxplot(dat[,i], main=names(dat)[i], xlab = names(dat)[i], col = "skyblue")}
}
if(qqnorm ==TRUE) {
for(i in 1:4) {stats::qqnorm(dat[,i], main=names(dat)[i], xlab = names(dat)[i], col = "skyblue")}
}
if(shapiro ==TRUE) {
results <-for(i in 1:4)  {stats::shapiro.test(dat[,i])}
print(results)
}
return(results)
}
univariateAnalysis(dat = iris, hist= TRUE)
univariateAnalysis(dat = iris, shapiro = TRUE)
mode <- function(x, method = "one", na.rm = FALSE) {
x <- unlist(x)
if (na.rm) {
x <- x[!is.na(x)]
}
# Get unique values
ux <- unique(x)
n <- length(ux)
if(n==1)
{
return(ux)
}
# Get frequencies of all unique values
frequencies <- tabulate(match(x, ux))
modes <- frequencies == max(frequencies)
# Determine number of modes
nmodes <- sum(modes)
nmodes <- ifelse(nmodes==n, 0L, nmodes)
if (method %in% c("one", "mode", "") | is.na(method)) {
# Return NA if not exactly one mode, else return the mode
if (nmodes != 1) {
return(NA)
} else {
return(ux[which(modes)])
}
} else if (method %in% c("n", "nmodes")) {
# Return the number of modes
return(nmodes)
} else if (method %in% c("all", "modes")) {
# Return NA if no modes exist, else return all modes
if (nmodes > 0) {
return(ux[which(modes)])
} else {
return(NA)
}
}
warning("Warning: method not recognised.  Valid methods are 'one'/'mode' [default], 'n'/'nmodes' and 'all'/'modes'")
}
mode(iris[, 5])
library(devtools)
devtools::check()
usethis::use_cran_comments()
devtools::check()
devtools::check()
devtools::check()
devtools::build()
devtools::check_win_devel()
library(devtools)
devtools::document()
package <-c('mice','missForest','FactoMineR','ggsci','partykit','rpart.plot','clusterCrit','C50','caret','FSelector','randomForest','RANN','fmsb)
package <-('mice','missForest','FactoMineR','ggsci','partykit','rpart.plot','clusterCrit','C50','caret','FSelector','randomForest','RANN','fmsb)
package <-('mice','missForest','FactoMineR','ggsci','partykit','rpart.plot','clusterCrit','C50','caret','FSelector','randomForest','RANN','fmsb)
package <-c("mice")
package <-c("mice", "missForest", "FactoMineR","ggsci","partykit","rpart.plot","clusterCrit","C50","caret","FSelector","randomForest","RANN","fmsb")
install.packages(package)
library(package)
devtools::check()
install.packages("spelling")
devtools::check()
install.packages("qpdf")
devtools::check()
devtools::check()
library(qpdf)
?qpdf
devtools::check()
devtools::check()
devtools::check()
devtools::check_win_devel()
devtools::check()
devtools::check()
?hClustCon
library(devtools)
devtools::check()
library(moderndive)
data("evals")
library(gapminder)
# selecting varaibles needed
library(dplyr)
evals_ch6 <- evals%>%
select(ID, score, age, gender)
library(ggplot2)
ggplot(evals_ch6, aes(x= age, y= score, colour = gender)) +
geom_point() +
labs(x= "Age", y= "Teaching score", colour = "Gender") +
geom_smooth(method = "lm", se= FALSE)
# Fit regression model:
score_model_interaction <- lm(score ~ age * gender, data = evals_ch6)
# Get regression table:
get_regression_table(score_model_interaction)
ggplot(evals_ch6, aes(x=age, y= score, colour = gender)) +
geom_point() +
labs(x = "Age", y = "Teaching Score", color = "Gender") +
geom_parallel_slopes(se = FALSE)
score_model_parallel_slopes <- lm(score ~ age + gender, data = evals_ch6)
# Get regression table:
get_regression_table(score_model_parallel_slopes)
?ModelMetrics
install.packages("ModelMetrics")
?ModelMetrics
library(ModelMetrics)
?ModelMetrics
regression_points <- get_regression_points(score_model_interaction)
regression_points
library(ISLR)
install.packages("ISLR")
library(ISLR)
data("credit")
data("Credit")
View(Credit)
credit_ch6 <- Credit %>% as_tibble() %>%
select(ID, debt = Balance, credit_limit = Limit,
income = Income, credit_rating = Rating, age = Age)
View(credit_ch6)
income = Income, credit_rating = Rating, age = Age)
View(credit_ch6)
credit_ch6 %>%
select(debt, credit_limit, income) %>%
cor()
ggplot(credit_ch6, aes(x=credit_limit, y = debt)) +
geom_point() +
labs(x= "credit limit", y= "credit debt", title="Debt and credit limit")+
geom_smoothe(method = "lm", se = FALSE)
ggplot(credit_ch6, aes(x=credit_limit, y = debt)) +
geom_point() +
labs(x= "credit limit", y= "credit debt", title="Debt and credit limit")+
geom_smooth(method = "lm", se = FALSE)
ggplot(credit_ch6, aes(x=income, y = debt)) +
geom_point() +
labs(x= "income", y= "credit debt", title="Debt and income")+
geom_smooth(method = "lm", se = FALSE)
debt_model <- lm(debt ~ credit_limit + income, data = credit_ch6)
# Get regression table:
get_regression_table(debt_model)
ggplot(credit_ch6, aes(x=credit_limit, y = debt)) +
geom_point() +
labs(x= "credit limit", y= "credit debt", title="Debt and credit limit")+
geom_smooth(method = "lm", se = FALSE)
library(devtools)
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(devtools)
devtools::check()
update.packages()
devtools::check()
update.packages()
devtools::check()
library(devtools)
install.packages("libgit2-dev")
install.packages("git2r")
usethis::use_package(git2r, type ="imports")
usethis::use_package(git2r)
usethis::use_package("git2r")
install.packages("libgit2-dev")
install.packages("libdevel")
install.packages("libgit2")
install.packages('git2r', type='source', configure.vars='LIB_DIR=-L/path/to/libs INCLUDE_DIR=-I/path/to/headers')
install.packages("git2r", type = "source", configure.vars = "LIB_DIR=-L/path/to/libs INCLUDE_DIR=-I/path/to/headers")
install.packages('openssl')
usethis::use_package("openssl")
install.packages('libssl')
install.packages(" libssl-dev")
install.packages(" libssl")
install.packages("rJava")
usethis::use_package("rJava")
usethis::use_package("rlang")
install.packages('ModelMetrics')
usethis::use_package("ModelMetrics")
install.packages('RWekajars')
usethis::use_package("RWekajars")
usethis::use_package("RWeka")
install.packages('shiny')
usethis::use_package("shiny")
usethis::use_package("httr")
install.packages("covr")
usethis::use_package("covr")
usethis::use_package("gh")
usethis::use_package("usethis")
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::build()
devtools:: check_win_devel()
devtools::check_rhub()
Token: 91dad89f51fe43caaf084a02539e2e57
devtools::release_checks()
devtools::release()
devtools::check_rhub()
Email address: henry.nanji@nottingham.ac.uk
henry.nanji@nottingham.ac.uk
list_validated_emails()
rhub::list_validated_emails()
devtools::check()
devtools::build()
devtools::release()
devtools::check_rhub()
validate_email(email = henry.nanji@nottingham, token = 91dad89f51fe43caaf084a02539e2e57)
validate_email(email = henry.nanji@nottingham, token = 91dad89f51fe43caaf084a02539e2e5)
validate_email(email = henry.nanji@nottingham.ac.uk, token = 91dad89f51fe43caaf084a02539e2e57)
rhub::list_validated_emails()
devtools::release()
devtools::check_rhub()
validate_email(email = henry.nanji@nottingham.ac.uk)
validate_email(email = henry.nanji@nottingham.ac.uk, token =91dad89f51fe43caaf084a02539e2e57)
rhub:::email_file()
validate_email(email = henry.nanji@nottingham.ac.uk, token =91dad89f51fe43caaf084a02539e2e57)
rhub:::email_file()
validate_email(email = henry.nanji@nottingham.ac.uk, token =91dad89f51fe43caaf084a02539e2e5)
rhub:::email_file(henry.nanji@nottingham.ac.uk)
rhub:::email_file()
rhub:::email_file()
rhub:::email_file()
check()
validate_email(email = <henry.nanji@nottingham.ac.uk>, token =<91dad89f51fe43caaf084a02539e2e57>)
whoami::email_address()
whoami::email_address()
whoami::fullname()
whoami::email_address()
validate_email(email = <henry.nanji@nottingham.ac.uk>, token =<91dad89f51fe43caaf084a02539e2e57>)
validate_email(email = henry.nanji@nottingham.ac.uk, token =91dad89f51fe43caaf084a02539e2e5)
validate_email(email = henry.nanji@nottingham.ac.uk, token =91dad89f51fe43caaf084a02539e2e57)
validate_email(henry.nanji@nottingham.ac.uk, token =91dad89f51fe43caaf084a02539e2e57)
validate_email(email = 'henry.nanji@nottingham.ac.uk', token =91dad89f51fe43caaf084a02539e2e57)
validate_email(email = 'henry.nanji@nottingham.ac.uk', token ='91dad89f51fe43caaf084a02539e2e57')
install.packages("valid.email")
devtools::check()
devtools::build()
devtools::release()
devtools::check_rhub()
