flag = T
}
#For numerical VS numerical data
if(is.numeric(x) & is.numeric(y))
{
if(flag)
{
cor = stats::cor.test(x, y, method = "kendall")
test = "Kendall"
}
else
{
cor = stats::cor.test(x, y, method = "pearson")
test = "Pearson"
}
# cor = cor.test(x, y, method = "spearman")
# test = "Spearman"
temp = cbind.data.frame("X" = xname,
"Y" = yname,
"Type" = test,
"Statistic" = cor$estimate,
"pval" = cor$p.value,
"no.data" = no.data)
results = rbind.data.frame(results, temp)
#scatter plot
if(plot)
{
pl = data.frame(x,y)
colnames(pl) = c(xname, yname)
p1 = ggplot2::ggplot(pl, ggplot2::aes_string(x = xname, y = yname)) + ggplot2::geom_point() +
ggplot2::xlab(xname) + ggplot2::ylab(yname)
print(p1)
}
}
else if(!is.numeric(x) & !is.numeric(y)) #categorical VS categorical
{
tab = table(x,y)
if(sum(tab <= 5))
{
cor = stats::fisher.test(x, y, simulate.p.value = TRUE, B = 1e5)
test = "Fisher Exact"
cor$statistic = NA
}
else
{
cor = stats::chisq.test(x, y)
test = "Chi-square"
}
temp = cbind.data.frame("X" = xname,
"Y" = yname,
"Type" = test,
"Statistic" = cor$statistic,
"pval" = cor$p.value,
"no.data" = no.data)
results = rbind.data.frame(results, temp)
#bar plot
if(plot)
{
pl = data.frame(x,y)
colnames(pl) = c(xname, yname)
p1 = ggplot2::ggplot(pl, ggplot2::aes_string(x = xname,
fill = yname)) + ggplot2::geom_bar(position="dodge")
print(p1)
}
}
else if((!is.numeric(x) & is.numeric(y)) | (is.numeric(x) & !is.numeric(y)))
{
#which one is numeric
if(!is.numeric(x))
{
#y is numeric
met = y
non.met = x
col.x = make.names(xname)
col.y = make.names(yname)
}
else
{
met = x
non.met = y
col.x = make.names(yname)
col.y = make.names(xname)
}
#prepare data
level = levels(non.met)
no.level = length(level)
#check normality
norm.test = stats::shapiro.test(met)
if(norm.test$p.value >= 0.05)
{
#normal distribution, parametric test
if(no.level > 2)
{
#one-way ANOVA
temp = data.frame(as.numeric(non.met), met)
colnames(temp) = c("y", "x")
test = "One-way ANOVA"
cor = summary(stats::aov(y ~ x, temp))
cor$statistic = cor[[1]]$`F value`[1]
cor$p.value = cor[[1]]$`Pr(>F)`[1]
}
else
{
cor = stats::t.test(met[non.met == level[1]], met[non.met == level[2]])
test = "T-test"
}
}
else
{
#Non-parametric test
if(no.level > 2)
{
cor = stats::kruskal.test(met, non.met)
test = "Kruskal-Wallis"
}
else
{
cor = stats::wilcox.test(met[non.met == level[1]], met[non.met == level[2]])
test = "Mann-Whitney"
}
}
temp = cbind.data.frame("X" = xname,
"Y" = yname,
"Type" = test,
"Statistic" = cor$statistic,
"pval" = cor$p.value,
"no.data" = no.data)
results = rbind.data.frame(results, temp)
#box plot
if(plot)
{
pl = data.frame(non.met, met)
colnames(pl) = c(col.x, col.y)
p1 = ggplot2::ggplot(pl, ggplot2::aes_string(x = col.x, y = col.y, fill = col.x)) + ggplot2::geom_boxplot()
print(p1)
}
}
},
error = function(err){print(paste("Error", err, "with", xname, "and", yname))},
warning = function(w){if(warning){print(paste("Warning", w, "with", xname, "and", yname))}}
)
}
}
row.names(results) = NULL
return(results)
}
bivariateAnalysis(iris)
devtools::check()
colnames(iris)
library(devtools)
devtools::document()
devtools::document()
?checkVariableNames
devtools::document()
devtools::check()
devtools::document()
devtools::check()
?message()
devtools::document()
devtools::check()
?checkVariableNames
devtools::document()
devtools::check()
?mutualInfo
devtools::document()
devtools::check()
?mutualInfo
?plotHelper
?plotHelper
?correctType
devtools::document()
devtools::check()
devtools::check()
?correctType
?plotMissing
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?shortName
?plotMissing
devtools::check()
devtools::document()
devtools::check()
?mode
?discretize
devtools::check()
?discretize
devtools::check()
?treeAnalysis
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?clusterPlot
devtools::check()
devtools::check()
devtools::check()
?bivariateAnalysis
devtools::check()
devtools::check()
?getCriteriaNames
devtools::check()
?do.call
devtools::check()
devtools::check()
?preCheck
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?preCheck
devtools::check()
install.packages("klaR")
library(klaR)
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?univariateAnalysis
devtools::check()
devtools::check()
devtools::check()
library(usethis)
library(devtools)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?plotBoxplotGroup
devtools::check()
?plotBoxplotGroup
?plotBeforeAfterImpute
devtools::check()
?missforest
?missForest
devtools::check()
devtools::check()
?plotBeforeAfterImpute
?MRMR
devtools::check()
devtools::check()
?getName
?getName
devtools::check()
devtools::check()
devtools::check()
?hClustCon
devtools::check()
devtools::check()
?hClustCon
?agnes
?getClusterDesc
devtools::check()
devtools::check()
?getClusterDesc
devtools::check()
devtools::check()
devtools::check()
?getClusCategoDesc
devtools::check()
devtools::check()
?checkValidity
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?
?getName
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?shortnames
?shortnames
shortNames
?shortNames
?shortName
?shortnames
devtools::check()
install.packages("klaR")
library(klaR)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?getName
??getName
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?
?tolower
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?do.call
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(devtools)
devtools::check()
?shapiro.test
devtools::check()
devtools::check()
devtools::check()
?qqnorm
devtools::check()
?univariateAnalysis
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?mlAnalysis
?mlAnalysis
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?checkImpute
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?dataImputation
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?clusterPlot
devtools::check()
devtools::check()
?hClustCon
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(devtools)
devtools:check()
devtools::check()
devtools::check()
fs = tolower(fs)
devtools::check()
devtools::check()
devtools::check()
? clusterAanalysis
?clusterAanalysis
devtools::check()
?mode
library(devtools)
devtools::check()
?clusterAanalysis
??clusterAanalysis
devtools::check()
?clusterAanalysis
devtools::check()
library(devtools)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?treeAnalysis
devtools::check()
library(dev)
library(devtools)
devtools::check()
?mode
devtools::check()
?getName
devtools::check()
devtools::check()
devtools::check()
univariateAnalysis  = function(dat, hist = FALSE,boxplot = FALSE,qqnorm  = FALSE, shapiro = FALSE){
graphics::par(mfrow = c(1,4))
if (hist ==TRUE){
for(i in 1:4) {  graphics::hist(dat[,i], main=names(dat)[i], xlab = names(dat)[i], col = "skyblue")}
}
if(boxplot == TRUE) {
for(i in 1:4)  {graphics::boxplot(dat[,i], main=names(dat)[i], xlab = names(dat)[i], col = "skyblue")}
}
if(qqnorm ==TRUE) {
for(i in 1:4) {stats::qqnorm(dat[,i], main=names(dat)[i], xlab = names(dat)[i], col = "skyblue")}
}
if(shapiro ==TRUE) {
results <-for(i in 1:4)  {stats::shapiro.test(dat[,i])}
print(results)
}
}
data(iris)
univariateAnalysis(dat = iris, hist= TRUE)
univariateAnalysis  = function(dat, hist = FALSE,boxplot = FALSE,qqnorm  = FALSE, shapiro = FALSE){
graphics::par(mfrow = c(1,4))
if (hist ==TRUE){
for(i in 1:4) {  graphics::hist(dat[,i], main=names(dat)[i], xlab = names(dat)[i], col = "skyblue")}
}
if(boxplot == TRUE) {
for(i in 1:4)  {graphics::boxplot(dat[,i], main=names(dat)[i], xlab = names(dat)[i], col = "skyblue")}
}
if(qqnorm ==TRUE) {
for(i in 1:4) {stats::qqnorm(dat[,i], main=names(dat)[i], xlab = names(dat)[i], col = "skyblue")}
}
if(shapiro ==TRUE) {
results <-for(i in 1:4)  {stats::shapiro.test(dat[,i])}
print(results)
}
return(results)
}
univariateAnalysis(dat = iris, hist= TRUE)
univariateAnalysis(dat = iris, shapiro = TRUE)
mode <- function(x, method = "one", na.rm = FALSE) {
x <- unlist(x)
if (na.rm) {
x <- x[!is.na(x)]
}
# Get unique values
ux <- unique(x)
n <- length(ux)
if(n==1)
{
return(ux)
}
# Get frequencies of all unique values
frequencies <- tabulate(match(x, ux))
modes <- frequencies == max(frequencies)
# Determine number of modes
nmodes <- sum(modes)
nmodes <- ifelse(nmodes==n, 0L, nmodes)
if (method %in% c("one", "mode", "") | is.na(method)) {
# Return NA if not exactly one mode, else return the mode
if (nmodes != 1) {
return(NA)
} else {
return(ux[which(modes)])
}
} else if (method %in% c("n", "nmodes")) {
# Return the number of modes
return(nmodes)
} else if (method %in% c("all", "modes")) {
# Return NA if no modes exist, else return all modes
if (nmodes > 0) {
return(ux[which(modes)])
} else {
return(NA)
}
}
warning("Warning: method not recognised.  Valid methods are 'one'/'mode' [default], 'n'/'nmodes' and 'all'/'modes'")
}
mode(iris[, 5])
